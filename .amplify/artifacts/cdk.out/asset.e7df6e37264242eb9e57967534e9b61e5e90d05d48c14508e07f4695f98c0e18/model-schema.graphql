type Project @model @auth(rules: [{allow: groups, groupsField: "name"}])
{
  name: String!
  categories: [Category] @hasMany(references: ["projectId"])
  images: [Image] @hasMany(references: ["projectId"])
  imageMetas: [ImageMeta] @hasMany(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["projectId"])
  objects: [Object] @hasMany(references: ["projectId"])
  imageSets: [ImageSet] @hasMany(references: ["projectId"])
  annotationSets: [AnnotationSet] @hasMany(references: ["projectId"])
  locations: [Location] @hasMany(references: ["projectId"])
  locationSets: [LocationSet] @hasMany(references: ["projectId"])
  observations: [Observation] @hasMany(references: ["projectId"])
}

type Category @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  name: String!
  color: String
  shortcutKey: String
  annotations: [Annotation] @hasMany(references: ["categoryId"])
}

type ImageMeta @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  latitude: Float
  longitude: Float
  altitude_wgs84: Float
  altitude_agl: Float
  altitude_egm96: Float
  width: Int!
  height: Int!
  roll: Float
  yaw: Float
  pitch: Float
  timestamp: AWSDateTime
  exifData: String
  cameraSerial: String
  images: [Image] @hasMany(references: ["metaId"])
  locations: [Location] @hasMany(references: ["metaId"])
  annotations: [Annotation] @hasMany(references: ["metaId"])
}

type Image @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  derivedFrom: ID
  path: String!
  metaId: ID
  meta: ImageMeta @belongsTo(references: ["metaId"])
  type: String!
  sets: [ImageSetMembership] @hasMany(references: ["imageId"])
}

type AnnotationSet @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["setId"])
}

type Annotation @model @auth(rules: [{allow: groups, groupsField: "projectId"},
  {allow: owner, ownerField: "owner"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  setId: ID!
  set: AnnotationSet @belongsTo(references: ["setId"])
  source: String!
  categoryId: ID!
  category: Category @belongsTo(references: ["categoryId"])
  metaId: ID!
  image: ImageMeta @belongsTo(references: ["metaId"])
  x: Int!
  y: Int!
  objectId: ID
  object: Object @belongsTo(references: ["objectId"])
}

type Object @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["objectId"])
}

type Location @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  metaId: ID
  meta: ImageMeta @belongsTo(references: ["metaId"])
  height: Int
  width: Int
  x: Int!
  y: Int!
  source: String!
  confidence: Float
  observations: [Observation] @hasMany(references: ["locationId"])
  sets: [LocationSetMembership] @hasMany(references: ["locationId"])
}

type Observation @model @auth(rules: [{allow: groups, groupsField: "projectId"},
  {allow: owner, ownerField: "owner"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  locationId: ID!
  location: Location @belongsTo(references: ["locationId"])
}

type LocationSet @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  locations: [LocationSetMembership] @hasMany(references: ["locationSetId"])
}

type LocationSetMembership @model @auth(rules: [{allow: private}])
{
  locationId: ID!
  locationSetId: ID!
  location: Location @belongsTo(references: ["locationId"])
  locationSet: LocationSet @belongsTo(references: ["locationSetId"])
}

type ImageSetMembership @model @auth(rules: [{allow: private}])
{
  imageId: ID!
  imageSetId: ID!
  image: Image @belongsTo(references: ["imageId"])
  imageSet: ImageSet @belongsTo(references: ["imageSetId"])
}

type ImageSet @model @auth(rules: [{allow: groups, groupsField: "projectId"}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  name: String!
  images: [ImageSetMembership] @hasMany(references: ["imageSetId"])
}