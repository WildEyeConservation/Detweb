type Project @model @auth(rules: [{allow: private}])
{
  name: String!
  categories: [Category] @hasMany(references: ["projectId"])
  images: [Image] @hasMany(references: ["projectId"])
  imageFiles: [ImageFile] @hasMany(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["projectId"])
  objects: [Object] @hasMany(references: ["projectId"])
  imageSets: [ImageSet] @hasMany(references: ["projectId"])
  annotationSets: [AnnotationSet] @hasMany(references: ["projectId"])
  locations: [Location] @hasMany(references: ["projectId"])
  locationSets: [LocationSet] @hasMany(references: ["projectId"])
  observations: [Observation] @hasMany(references: ["projectId"])
  members: [UserProjectMembership] @hasMany(references: ["projectId"])
  queues: [Queue] @hasMany(references: ["projectId"])
}

type Category @model @auth(rules: [{allow: private}])
{
  projectId: ID! @index(queryField: "categoriesByProjectId")
  project: Project @belongsTo(references: ["projectId"])
  name: String!
  color: String
  shortcutKey: String
  annotations: [Annotation] @hasMany(references: ["categoryId"])
  objects: [Object] @hasMany(references: ["categoryId"])
}

type Image @model @auth(rules: [{allow: private}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  latitude: Float
  longitude: Float
  altitude_wgs84: Float
  altitude_agl: Float
  altitude_egm96: Float
  width: Int!
  height: Int!
  roll: Float
  yaw: Float
  pitch: Float
  timestamp: AWSTimestamp
  exifData: String
  cameraSerial: String
  files: [ImageFile] @hasMany(references: ["imageId"])
  locations: [Location] @hasMany(references: ["imageId"])
  annotations: [Annotation] @hasMany(references: ["imageId"])
  memberships: [ImageSetMembership] @hasMany(references: ["imageId"])
}

type ImageFile @model @auth(rules: [{allow: private}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  path: String!
  imageId: ID @index(queryField: "imagesByimageId")
  key: String!
  image: Image @belongsTo(references: ["imageId"])
  type: String!
}

type AnnotationSet @model @auth(rules: [{allow: private}])
{
  projectId: ID! @index(queryField: "annotationSetsByProjectId")
  project: Project @belongsTo(references: ["projectId"])
  name: String!
  annotations: [Annotation] @hasMany(references: ["setId"])
  observations: [Observation] @hasMany(references: ["annotationSetId"])
}

type Annotation @model @auth(rules: [{allow: private}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  setId: ID! @index(queryField: "annotationsByAnnotationSetId")
  set: AnnotationSet @belongsTo(references: ["setId"])
  source: String!
  categoryId: ID! @index(queryField: "annotationsByCategoryId")
  category: Category @belongsTo(references: ["categoryId"])
  imageId: ID! @index(queryField: "annotationsByimageId")
  image: Image @belongsTo(references: ["imageId"])
  x: Int!
  y: Int!
  obscured: Boolean
  objectId: ID @index(queryField: "annotationsByObjectId")
  object: Object @belongsTo(references: ["objectId"])
}

type Object @model @auth(rules: [{allow: private}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["objectId"])
  categoryId: ID! @index(queryField: "objectsByCategoryId")
  category: Category @belongsTo(references: ["categoryId"])
}

type Location @model @auth(rules: [{allow: private}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  imageId: ID @index(queryField: "locationsByImageKey")
  image: Image @belongsTo(references: ["imageId"])
  setId: ID! @index(queryField: "locationsBySetId")
  set: LocationSet @belongsTo(references: ["setId"])
  height: Int
  width: Int
  x: Int!
  y: Int!
  source: String!
  confidence: Float
  observations: [Observation] @hasMany(references: ["locationId"])
  sets: [LocationSetMembership] @hasMany(references: ["locationId"])
}

type Observation @model @auth(rules: [{allow: private}])
{
  projectId: ID!
  project: Project @belongsTo(references: ["projectId"])
  locationId: ID! @index(queryField: "observationsByLocationId")
  location: Location @belongsTo(references: ["locationId"])
  annotationSetId: ID! @index(queryField: "observationsByAnnotationSetId")
  annotationSet: AnnotationSet @belongsTo(references: ["annotationSetId"])
}

type LocationSet @model @auth(rules: [{allow: private}])
{
  projectId: ID! @index(queryField: "locationSetsByProjectId")
  name: String!
  project: Project @belongsTo(references: ["projectId"])
  locations: [Location] @hasMany(references: ["setId"])
  memberships: [LocationSetMembership] @hasMany(references: ["locationSetId"])
}

type LocationSetMembership @model @auth(rules: [{allow: private}])
{
  locationId: ID!
  locationSetId: ID!
  location: Location @belongsTo(references: ["locationId"])
  locationSet: LocationSet @belongsTo(references: ["locationSetId"])
}

type ImageSetMembership @model @auth(rules: [{allow: private}])
{
  imageId: ID!
  imageSetId: ID! @index(queryField: "imageSetMembershipsByImageSetId")
  image: Image @belongsTo(references: ["imageId"])
  imageSet: ImageSet @belongsTo(references: ["imageSetId"])
}

type ImageSet @model @auth(rules: [{allow: private}])
{
  projectId: ID! @index(queryField: "imageSetsByProjectId")
  project: Project @belongsTo(references: ["projectId"])
  name: String!
  images: [ImageSetMembership] @hasMany(references: ["imageSetId"])
}

type UserProjectMembership @model @auth(rules: [{allow: private}])
{
  userId: String! @index(queryField: "userProjectMembershipsByUserId")
  projectId: ID! @index(queryField: "userProjectMembershipsByProjectId")
  project: Project @belongsTo(references: ["projectId"])
  isAdmin: Boolean
  queueUrl: String @index(queryField: "userProjectMembershipsByQueueUrl")
}

type Queue @model @auth(rules: [{allow: private}])
{
  projectId: ID! @index(queryField: "queuesByProjectId")
  project: Project @belongsTo(references: ["projectId"])
  name: String!
  url: AWSURL!
}

type UserType @aws_cognito_user_pools
{
  name: String!
  id: ID!
  isAdmin: Boolean
}

type Message @aws_cognito_user_pools @aws_api_key @aws_lambda
{
  content: String!
  channelName: String!
}

type CountType 
{
  count: Int!
}

type ListUsersReturnType @aws_cognito_user_pools
{
  Users: [UserType]
  NextToken: String
}

type Mutation {
  addUserToGroup(userId: String!, groupName: String!): AWSJSON @function(name: "FnAddUserToGroup") @auth(rules: [{allow: private}])
  removeUserFromGroup(userId: String!, groupName: String!): AWSJSON @function(name: "FnRemoveUserFromGroup") @auth(rules: [{allow: private}])
  createGroup(groupName: String!): AWSJSON @function(name: "FnCreateGroup") @auth(rules: [{allow: private}])
  publish(channelName: String!, content: String!): Message @aws_cognito_user_pools @aws_api_key @aws_lambda
  processImages(s3key: String!, model: String!, threshold: Float): String @function(name: "FnProcessImages") @auth(rules: [{allow: private}])
}

type Query {
  listUsers(nextToken: String): ListUsersReturnType @function(name: "FnListUsers") @auth(rules: [{allow: private}])
  listGroupsForUser(userId: String!, nextToken: String): AWSJSON @function(name: "FnListGroupsForUser") @auth(rules: [{allow: private}])
  getImageCounts(imageSetId: String!): Int @aws_cognito_user_pools
}

type Subscription {
  receive: Message @aws_subscribe(mutations: ["publish"]) @aws_cognito_user_pools
}