type Project @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  name: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  categories: [Category] @hasMany(references: ["projectId"])
  imageSets: [ImageSet] @hasMany(references: ["projectId"])
  imageFiles: [ImageFile] @hasMany(references: ["projectId"])
  locations: [Location] @hasMany(references: ["projectId"])
  locationSets: [LocationSet] @hasMany(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["projectId"])
  annotationSets: [AnnotationSet] @hasMany(references: ["projectId"])
  observations: [Observation] @hasMany(references: ["projectId"])
  members: [UserProjectMembership] @hasMany(references: ["projectId"])
  queues: [Queue] @hasMany(references: ["projectId"])
  images: [Image] @hasMany(references: ["projectId"])
  objects: [Object] @hasMany(references: ["projectId"])
}

type Category @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  name: String!
  color: String
  shortcutKey: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["categoryId"])
  objects: [Object] @hasMany(references: ["categoryId"])
}

type Image @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  latitude: Float
  longitude: Float
  altitude_wgs84: Float
  altitude_agl: Float
  altitude_egm96: Float
  width: Int!
  height: Int!
  roll: Float
  yaw: Float
  pitch: Float
  timestamp: AWSDateTime
  exifData: String
  cameraSerial: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  imageFiles: [ImageFile] @hasMany(references: ["imageId"])
  locations: [Location] @hasMany(references: ["imageId"])
  annotations: [Annotation] @hasMany(references: ["imageId"])
  sets: [ImageSetMembership] @hasMany(references: ["imageId"])
}

type ImageFile @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  path: String!
  imageId: String
  s3key: String!
  type: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  image: Image @belongsTo(references: ["imageId"])
}

type AnnotationSet @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  name: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["setId"])
  observations: [Observation] @hasMany(references: ["annotationSetId"])
}

type Object @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  categoryId: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  annotations: [Annotation] @hasMany(references: ["objectId"])
  category: Category @belongsTo(references: ["categoryId"])
}

type Annotation @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  setId: String!
  source: String!
  categoryId: String!
  imageId: String!
  x: Int!
  y: Int!
  obscured: Int
  objectId: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  category: Category @belongsTo(references: ["categoryId"])
  image: Image @belongsTo(references: ["imageId"])
  object: Object @belongsTo(references: ["objectId"])
  set: AnnotationSet @belongsTo(references: ["setId"])
}

type LocationSet @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  name: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  locations: [Location] @hasMany(references: ["setId"])
}

type Location @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  imageId: String
  setId: String!
  height: Int
  width: Int
  x: Int!
  y: Int!
  source: String!
  confidence: Float
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  image: Image @belongsTo(references: ["imageId"])
  set: LocationSet @belongsTo(references: ["setId"])
  observations: [Observation] @hasMany(references: ["locationId"])
}

type Observation @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  locationId: String!
  annotationSetId: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  location: Location @belongsTo(references: ["locationId"])
  annotationSet: AnnotationSet @belongsTo(references: ["annotationSetId"])
}

type ImageSet @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  name: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
  images: [ImageSetMembership] @hasMany(references: ["imageSetId"])
}

type ImageSetMembership @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  imageId: String!
  imageSetId: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  image: Image @belongsTo(references: ["imageId"])
  imageSet: ImageSet @belongsTo(references: ["imageSetId"])
}

type UserProjectMembership @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  userId: String!
  projectId: String!
  isAdmin: Int
  queueUrl: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
}

type Queue @model(timestamps: null) @auth(rules: [{allow: private}]) {
  id: String! @primaryKey
  projectId: String!
  name: String!
  url: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  project: Project @belongsTo(references: ["projectId"])
}

type countType @aws_cognito_user_pools {
  count: Int
}

type UserType @aws_cognito_user_pools {
  name: String!
  id: String!
  isAdmin: Int
}

type ListUsersReturnType @aws_cognito_user_pools {
  Users: [UserType]
  NextToken: String
}

type Mutation {
  addUserToGroup(userId: String!, groupName: String!): AWSJSON @function(name: "FnAddUserToGroup") @auth(rules: [{allow: private}])
  removeUserFromGroup(userId: String!, groupName: String!): AWSJSON @function(name: "FnRemoveUserFromGroup") @auth(rules: [{allow: private}])
  createGroup(groupName: String!): AWSJSON @function(name: "FnCreateGroup") @auth(rules: [{allow: private}])
}

type Query {
  numberOfImagesInSet(imageSetId: String!): [countType] @sql(statement: "SELECT\n            COUNT(*) AS count\n            FROM ImageSetMembership\n            WHERE imageSetId = :imageSetId;") @auth(rules: [{allow: private}])
  listUsers(nextToken: String): ListUsersReturnType @function(name: "FnListUsers") @auth(rules: [{allow: private}])
  listGroupsForUser(userId: String!, nextToken: String): AWSJSON @function(name: "FnListGroupsForUser") @auth(rules: [{allow: private}])
}
